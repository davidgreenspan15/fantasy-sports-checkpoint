// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Year {
  id        String    @id @default(uuid())
  year      Int       @unique
  Seasons   Season[]
  // Roster
  // Depth Chart
  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@map(name: "years")
}

model Season {
  id         String    @id @default(uuid())
  name       String //Preseason, Regular, Postseason, Offseason
  type       Int // 1=Preseaons ,2=Regular,3=Postseason,4=Offseason
  Games      Game[]
  Year       Year?     @relation(fields: [yearNumber], references: [year])
  yearNumber Int?      @map(name: "year_number")
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime? @map(name: "updated_at")

  @@unique([yearNumber, type])
  @@map(name: "seasons")
}

model League {
  id           String     @id @default(uuid())
  espnId       String     @map(name: "espn_id")
  name         String
  shortName    String     @map(name: "short_name")
  abbreviation String
  slug         String
  sport        String
  Teams        Team[]
  Athletes     Athlete[]
  Games        Game[]
  Positions    Position[]
  Depths       Depth[]

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@unique([sport, espnId])
  @@map(name: "leagues")
}

model Team {
  id                String              @id @default(uuid())
  espnId            String              @map(name: "espn_id")
  uid               String              @unique //Currently most unique attribute for all sports etc
  name              String
  abbreviation      String
  slug              String
  location          String
  nickname          String
  displayName       String              @map(name: "display_name")
  shortDisplayName  String              @map(name: "short_display_name")
  isActive          Boolean             @map(name: "is_active")
  Games             Game[]
  Athletes          Athlete[]
  TeamGameStatistic TeamGameStatistic[]
  League            League              @relation(fields: [leagueId], references: [id])
  leagueId          String              @map(name: "league_id")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@unique([espnId, leagueId])
  @@map(name: "teams")
}

model Athlete {
  id                   String                 @id @default(uuid())
  espnId               String                 @map(name: "espn_id")
  uid                  String                 @unique
  guid                 String                 @unique
  firstName            String                 @map(name: "first_name")
  lastName             String                 @map(name: "last_name")
  fullName             String                 @map(name: "full_name")
  displayName          String                 @map(name: "display_name")
  shortName            String                 @map(name: "short_name")
  weight               Int?                   @map(name: "weight")
  height               Int?                   @map(name: "height")
  displayHeight        String?                @map(name: "display_height")
  age                  Int?                   @map(name: "age")
  dateOfBirth          DateTime?              @map(name: "date_of_birth")
  birthday             String?                @map(name: "birthday") // Month/Date/Year no extra 0
  slug                 String
  espnUrl              String                 @default("https://www.espn.com") @map(name: "espn_url")
  number               String?
  isInjured            Boolean                @map(name: "is_injured")
  injuryStatus         String?                @map(name: "injury_status")
  Depths               Depth[]
  AthleteGameStatistic AthleteGameStatistic[]
  FpsAthlete           FpsAthlete?
  Team                 Team?                  @relation(fields: [teamId], references: [id])
  teamId               String?                @map(name: "team_id")
  Position             Position               @relation(fields: [positionId], references: [id])
  positionId           String                 @map(name: "position_id")
  League               League                 @relation(fields: [leagueId], references: [id])
  leagueId             String                 @map(name: "league_id")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@unique([espnId, leagueId])
  @@map(name: "athletes")
}

model Depth {
  id        String     @id @default(uuid())
  espnId    String     @map(name: "espn_id")
  name      String     @map(name: "name")
  depth     Int
  Athletes  Athlete[]
  Positions Position[]
  League    League     @relation(fields: [leagueId], references: [id])
  leagueId  String     @map(name: "league_id")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@unique([espnId, leagueId, depth])
  @@map(name: "depths")
}

model Position {
  id               String    @id @default(uuid())
  espnId           String    @map(name: "espn_id")
  name             String
  displayName      String    @map(name: "display_name")
  abbreviation     String
  parentPositionId String?   @map(name: "parent_position_id")
  Athletes         Athlete[]
  Depths           Depth[]
  League           League    @relation(fields: [leagueId], references: [id])
  leagueId         String    @map(name: "league_id")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@unique([espnId, leagueId])
  @@map(name: "positions")
}

model Game {
  id         String         @id @default(uuid())
  espnId     String         @map(name: "espn_id")
  date       DateTime
  name       String
  shortName  String         @map(name: "short_name")
  week       Int?
  isComplete Boolean        @default(false) @map(name: "is_complete")
  homeTeamId String         @map(name: "home_team_id")
  awayTeamId String         @map(name: "away_team_id")
  Statistics GameStatistic?
  Teams      Team[]
  Season     Season?        @relation(fields: [seasonId], references: [id])
  seasonId   String?        @map(name: "season_id")
  League     League         @relation(fields: [leagueId], references: [id])
  leagueId   String         @map(name: "league_id")

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@unique([espnId, leagueId])
  @@map(name: "games")
}

model GameStatistic {
  id                    String                 @id @default(uuid())
  Game                  Game                   @relation(fields: [gameId], references: [id])
  gameId                String                 @unique @map(name: "game_id")
  TeamGameStatistics    TeamGameStatistic[]
  AthleteGameStatistics AthleteGameStatistic[]
  createdAt             DateTime               @default(now()) @map(name: "created_at")
  updatedAt             DateTime?              @map(name: "updated_at")

  @@map(name: "game_statistics")
}

model TeamGameStatistic {
  id              String            @id @default(uuid())
  GameStatistic   GameStatistic     @relation(fields: [gameStatisticId], references: [id])
  gameStatisticId String            @map(name: "game_statistic_id")
  Team            Team              @relation(fields: [teamId], references: [id])
  teamId          String            @map(name: "team_id")
  NflStatistic    NflTeamStatistic?

  @@map(name: "team_game_statistics")
}

model AthleteGameStatistic {
  id              String               @id @default(uuid())
  Athlete         Athlete              @relation(fields: [athleteId], references: [id])
  athleteId       String               @map(name: "athlete_id")
  GameStatistic   GameStatistic        @relation(fields: [gameStatisticId], references: [id])
  gameStatisticId String               @map(name: "game_statistic_id")
  NflStatistic    NflAthleteStatistic?

  createdAt DateTime  @default(now()) @map(name: "created_at")
  updatedAt DateTime? @map(name: "updated_at")

  @@map(name: "athlete_game_statistics")
}

model NflAthleteStatistic {
  id                       String                 @id @default(uuid())
  AthleteGameStatistic     AthleteGameStatistic?  @relation(fields: [athleteGameStatisticId], references: [id])
  athleteGameStatisticId   String?                @unique @map(name: "athlete_game_statistic_id")
  NflTeamStatistic         NflTeamStatistic?
  PassingStatistics        PassingStatistics      @relation(fields: [passingStatisticsId], references: [id])
  passingStatisticsId      String                 @unique @map(name: "passing_statistics_id")
  RushingStatistics        RushingStatistics      @relation(fields: [rushingStatisticsId], references: [id])
  rushingStatisticsId      String                 @unique @map(name: "rushing_statistics_id")
  ReceivingStatistics      ReceivingStatistics    @relation(fields: [receivingStatisticsId], references: [id])
  receivingStatisticsId    String                 @unique @map(name: "receiving_statistics_id")
  FumbleStatistics         FumbleStatistics       @relation(fields: [fumbleStatisticsId], references: [id])
  fumbleStatisticsId       String                 @unique @map(name: "fumble_statistics_id")
  DefensiveStatistics      DefensiveStatistics    @relation(fields: [defensiveStatisticsId], references: [id])
  defensiveStatisticsId    String                 @unique @map(name: "defensive_statistics_id")
  InterceptionStatistics   InterceptionStatistics @relation(fields: [interceptionStatisticsId], references: [id])
  interceptionStatisticsId String                 @unique @map(name: "interception_statistics_id")
  KickReturnStatistics     KickReturnStatistics   @relation(fields: [kickReturnStatisticsId], references: [id])
  kickReturnStatisticsId   String                 @unique @map(name: "kick_return_statistics_id")
  PuntReturnStatistics     PuntReturnStatistics   @relation(fields: [puntReturnStatisticsId], references: [id])
  puntReturnStatisticsId   String                 @unique @map(name: "punt_return_statistics_id")
  KickingStatistics        KickingStatistics      @relation(fields: [kickingStatisticsId], references: [id])
  kickingStatisticsId      String                 @unique @map(name: "kicking_statistics_id")
  PuntingStatistics        PuntingStatistics      @relation(fields: [puntingStatisticsId], references: [id])
  puntingStatisticsId      String                 @unique @map(name: "punting_statistics_id")

  @@map(name: "nfl_statistics")
}

model NflTeamStatistic {
  id                       String              @id @default(uuid())
  firstDowns               Int                 @map(name: "first_downs")
  firstDownsPassing        Int                 @map(name: "first_downs_passing")
  firstDownsRushing        Int                 @map(name: "first_downs_rushing")
  firstDownsPenalty        Int                 @map(name: "first_downs_penalty")
  thirdDownEff             String              @map(name: "third_down_eff")
  fourthDownEff            String              @map(name: "fourth_down_eff")
  totalOffensivePlays      Int                 @map(name: "total_offensive_plays")
  totalYards               Int                 @map(name: "total_yards")
  yardsPerPlay             Float               @map(name: "yards_per_play")
  totalDrives              Int                 @map(name: "total_drives")
  netPassingYards          Int                 @map(name: "net_passing_yards")
  completionsAttempts      String              @map(name: "completions_attempts")
  yardsPerPass             Float               @map(name: "yards_per_pass")
  interceptions            Int                 @map(name: "interceptions")
  sacks                    Int
  sackYards                Int                 @map(name: "sack_yards")
  rushingAttempts          Int                 @map(name: "rushing_attempts")
  rushingYards             Int                 @map(name: "rushing_yards")
  yardsPerRushAttempt      Float               @map(name: "yards_per_rush_attempt")
  redZoneAttempts          Int                 @map(name: "red_zone_attempts")
  redZoneConversions       Int                 @map(name: "red_zone_conversions")
  totalPenalties           Int                 @map(name: "total_penalties")
  totalPenaltyYards        Int                 @map(name: "total_penalty_yards")
  turnovers                Int
  fumblesLost              Int                 @map(name: "fumbles_lost")
  interceptionsThrown      Int                 @map(name: "interceptions_thrown")
  defensiveTds             Int                 @map(name: "defensive_tds")
  possessionTime           String              @map(name: "possession_time")
  TeamGameStatistic        TeamGameStatistic   @relation(fields: [teamGameStatisticId], references: [id])
  teamGameStatisticId      String              @unique @map(name: "team_game_statistic_id")
  AthleteTotalStatistics   NflAthleteStatistic @relation(fields: [athleteTotalStatisticsId], references: [id])
  athleteTotalStatisticsId String              @unique @map("athlete_total_statistics_id")

  @@map("nfl_team_statistics")
}

model PassingStatistics {
  id                  String               @id @default(uuid())
  completions         Int
  attempts            Int
  yards               Int
  yardsPerAttempt     Float                @map("yards_per_attempt")
  touchdowns          Int
  interceptions       Int
  sacks               Int
  sackYardsLost       Int                  @map("sack_yards_lost")
  adjustedRating      Float                @map("adjusted_rating") //adjustedQBR
  rating              Float                @map("rating") //QBRating
  NflAthleteStatistic NflAthleteStatistic?
}

model RushingStatistics {
  id                  String               @id @default(uuid())
  attempts            Int
  yards               Int
  yardsPerAttempt     Float                @map("yards_per_attempt")
  touchdowns          Int
  longest             Int
  NflAthleteStatistic NflAthleteStatistic?
}

model ReceivingStatistics {
  id                  String               @id @default(uuid())
  receptions          Int
  targets             Int
  yards               Int
  yardsPerReception   Float                @map("yards_per_reception")
  touchdowns          Int
  longest             Int
  NflAthleteStatistic NflAthleteStatistic?
}

model FumbleStatistics {
  id                  String               @id @default(uuid())
  fumbles             Int
  lost                Int
  recovered           Int
  NflAthleteStatistic NflAthleteStatistic?
}

model DefensiveStatistics {
  id                  String               @id @default(uuid())
  totalTackles        Int                  @map("total_tackles")
  soloTackles         Int                  @map("solo_tackles")
  sacks               Float
  tacklesForLoss      Float                @map("tackles_for_loss")
  passesDefended      Int                  @map("passes_defended")
  qbHits              Int                  @map("qb_hits")
  touchdowns          Int
  NflAthleteStatistic NflAthleteStatistic?
}

model InterceptionStatistics {
  id                  String               @id @default(uuid())
  interceptions       Int
  yards               Int
  touchdowns          Int
  NflAthleteStatistic NflAthleteStatistic?
}

model KickReturnStatistics {
  id                  String               @id @default(uuid())
  returns             Int
  yards               Int
  yardsPerReturn      Float                @map("yards_per_return")
  touchdowns          Int
  longest             Int
  NflAthleteStatistic NflAthleteStatistic?
}

model PuntReturnStatistics {
  id                  String               @id @default(uuid())
  returns             Int
  yards               Int
  yardsPerReturn      Float                @map("yards_per_return")
  touchdowns          Int
  longest             Int
  NflAthleteStatistic NflAthleteStatistic?
}

model KickingStatistics {
  id                  String               @id @default(uuid())
  fieldGoalAttempts   Int                  @map("field_goal_attempts")
  fieldGoalMade       Int                  @map("field_goal_made")
  fieldGoalPct        Float                @map("field_goal_pct")
  longest             Int
  extraPointAttempts  Int                  @map("extra_point_attempts")
  extraPointMade      Int                  @map("extra_point_made")
  totalPoints         Int                  @map("total_points")
  NflAthleteStatistic NflAthleteStatistic?
}

model PuntingStatistics {
  id                  String               @id @default(uuid())
  punts               Int
  yards               Int
  yardsPerPunt        Float                @map("yards_per_punt")
  longest             Int
  puntsInside20       Int                  @map("punts_inside_20")
  touchbacks          Int
  NflAthleteStatistic NflAthleteStatistic?
}

model FpsAthlete {
  id             String           @id @default(uuid())
  name           String           @map("player_name")
  team           String
  position       String
  byeWeek        Int?             @map("bye_week")
  FpsAverageStat FpsAverageStat[]
  FpsTotalStat   FpsTotalStat[]
  FpsRank        FpsRank[]
  FpsNote        FpsNote[]
  FpsOverview    FpsOverview?
  Athlete        Athlete?         @relation(fields: [athleteId], references: [id])
  athleteId      String?          @unique @map("athlete_id")

  @@unique([name, team])
  @@map("fps_athletes")
}

model FpsAverageStat {
  id             String     @id @default(uuid())
  tiers          Int
  fanPts         Float      @map("fan_pts")
  yardsPassing   Float      @map("yards_passing")
  tdsPassing     Float      @map("tds_passing")
  rec            Int
  yardsReceiving Float      @map("yards_receiving")
  tdsReceiving   Float      @map("tds_receiving")
  att            Int
  yardsRushing   Float      @map("yards_rushing")
  tdsRushing     Float      @map("tds_rushing")
  FpsAthlete     FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId   String     @unique @map("fps_athlete_id")

  @@map("fps_average_stats")
}

model FpsTotalStat {
  id             String     @id @default(uuid())
  tiers          Int
  fanPts         Float      @map("fan_pts")
  yardsPassing   Float      @map("yards_passing")
  tdsPassing     Float      @map("tds_passing")
  rec            Int
  yardsReceiving Float      @map("yards_receiving")
  tdsReceiving   Float      @map("tds_receiving")
  att            Int
  yardsRushing   Float      @map("yards_rushing")
  tdsRushing     Float      @map("tds_rushing")
  FpsAthlete     FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId   String     @unique @map("fps_athlete_id")

  @@map("fps_total_stats")
}

model FpsRank {
  id           String     @id @default(uuid())
  tiers        Int
  best         Int
  worst        Int
  avg          Float
  stdDev       Float      @map("std_dev")
  ecrVsAdp     Float      @map("ecr_vs_adp")
  FpsAthlete   FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId String     @unique @map("fps_athlete_id")

  @@map("fps_ranks")
}

model FpsNote {
  id           String     @id @default(uuid())
  content      String
  FpsAthlete   FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId String     @unique @map("fps_athlete_id")

  @@map("fps_notes")
}

model FpsOverview {
  id           String     @id @default(uuid())
  sos          Float      @map("strength_of_schedule")
  ecrVsAdp     Float      @map("ecr_vs_adp")
  avgPts       Float      @map("average_points")
  pctGames     String     @map("percentage_games")
  FpsAthlete   FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId String     @unique @map("fps_athlete_id")

  @@map("fps_overviews")
}

/////////////////////////////////////
model ScrapedLeague {
  id           String          @id @default(uuid())
  teamsListUrl String          @map(name: "teams_list_url")
  abr          String          @unique
  teams        ScrapedTeam[]
  createdAt    DateTime        @default(now()) @map(name: "created_at")
  updatedAt    DateTime?       @map(name: "updated_at")
  player       ScrapedPlayer[]

  @@map(name: "scraped_leagues")
}

model ScrapedTeam {
  id            String          @id @default(uuid())
  league        ScrapedLeague   @relation(fields: [leagueId], references: [id])
  leagueId      String          @map(name: "league_id")
  depthChartUrl String?         @map(name: "depth_chart_url")
  rosterUrl     String          @map(name: "roster_url")
  teamUrl       String          @map(name: "team_url")
  scheduleUrl   String          @map(name: "schedule_url")
  city          String?
  name          String?
  abr           String
  imgSrc        String          @map(name: "img_src")
  players       ScrapedPlayer[]
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime?       @map(name: "updated_at")
  game          ScrapedGame[]

  @@map(name: "scraped_teams")
}

model ScrapedPlayer {
  id                  String           @id @default(uuid())
  team                ScrapedTeam      @relation(fields: [teamId], references: [id])
  teamId              String           @map(name: "team_id")
  name                String
  injuryStatus        String?          @map(name: "injury_status")
  pos                 String?
  depth               Int?
  positionGroup       String?          @map(name: "position_group")
  playerUrl           String           @map(name: "player_url")
  playerImageSrc      String           @map(name: "player_image_src")
  height              String?
  weight              String?
  experience          String?
  college             String?
  age                 String?
  number              String?
  playerDepthPosition String[]         @map(name: "player_depth_position")
  createdAt           DateTime         @default(now()) @map(name: "created_at")
  updatedAt           DateTime?        @map(name: "updated_at")
  League              ScrapedLeague?   @relation(fields: [leagueId], references: [id])
  leagueId            String?          @map(name: "league_id")
  fantasyProsData     FantasyProsData?
  batting             String?
  throwing            String?
  shot                String?
  birthPlace          String?          @map(name: "birth_place")
  birthDate           String?          @map(name: "birth_date")
  salary              String?
  espnPlayerId        String?          @map(name: "espn_player_id")

  @@unique([leagueId, espnPlayerId, name])
  @@map(name: "scraped_players")
}

model FantasyProsData {
  id                 String         @id @default(uuid())
  player             ScrapedPlayer? @relation(fields: [playerId], references: [id])
  playerId           String?        @unique @map(name: "player_id")
  rank               Int
  playerName         String         @map(name: "player_name")
  teamAbr            String         @map(name: "team_abr")
  pos                String
  byeWeek            Int?           @map(name: "bye_week")
  strengthOgSchedule String         @map(name: "strength_of_schedule")
  avgAdp             String         @map(name: "avg_adp")
  notes              String
  avgFanPoints       Float          @map(name: "avg_fan_points")
  avgPassingYds      Float          @map(name: "avg_passing_yards")
  avgPassingTds      Float          @map(name: "avg_passing_tds")
  avgReceivingRec    Float          @map(name: "avg_receiving_rec")
  avgReceivingYds    Float          @map(name: "avg_receiving_yds")
  avgReceivingTds    Float          @map(name: "avg_receiving_tds")
  avgRushingAtt      Float          @map(name: "avg_rushing_att")
  avgRushingYds      Float          @map(name: "avg_rushing_yds")
  avgRushingTds      Float          @map(name: "avg_rushing_tds")
  totalFanPoints     Float          @map(name: "total_fan_points")
  totalPassingYds    Float          @map(name: "total_passing_yds")
  totalPassingTds    Float          @map(name: "total_passing_tds")
  totalReceivingRec  Float          @map(name: "total_receiving_rec")
  totalReceivingYds  Float          @map(name: "total_receiving_yds")
  totalReceivingTds  Float          @map(name: "total_receiving_tds")
  totalRushingAtt    Float          @map(name: "total_rushing_att")
  totalRushingYds    Float          @map(name: "total_rushing_yds")
  totalRushingTds    Float          @map(name: "total_rushing_tds")
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  updatedAt          DateTime?      @map(name: "updated_at")

  @@map(name: "fantasy_pros_data")
}

model ScrapedGame {
  id         String        @id @default(uuid())
  homeTeamId String        @map(name: "home_team_id")
  awayTeamId String        @map(name: "away_team_id")
  createdAt  DateTime      @default(now()) @map(name: "created_at")
  updatedAt  DateTime?     @map(name: "updated_at")
  date       DateTime
  team       ScrapedTeam[]

  @@map(name: "scraped_games")
}
