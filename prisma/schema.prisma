// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model League {
  id           String     @id @default(uuid())
  espnId       String     @map(name: "espn_id")
  name         String
  shortName    String     @map(name: "short_name")
  abbreviation String
  slug         String
  sport        String
  createdAt    DateTime   @default(now()) @map(name: "created_at")
  updatedAt    DateTime?  @map(name: "updated_at")
  teams        Team[]
  athletes     Athlete[]
  positions    Position[]
  depths       Depth[]

  @@unique([sport, espnId])
  @@map(name: "leagues")
}

model Team {
  id               String     @id @default(uuid())
  espnId           String     @map(name: "espn_id")
  uid              String     @unique //Currently most unique attribute for all sports etc
  league           League     @relation(fields: [leagueId], references: [id])
  leagueId         String     @map(name: "league_id")
  name             String
  abbreviation     String
  slug             String
  location         String
  nickname         String
  displayName      String     @map(name: "display_name")
  shortDisplayName String     @map(name: "short_display_name")
  isActive         Boolean    @map(name: "is_active")
  createdAt        DateTime   @default(now()) @map(name: "created_at")
  updatedAt        DateTime?  @map(name: "updated_at")
  teamGames        TeamGame[]
  athletes         Athlete[]

  @@unique([espnId, leagueId])
  @@map(name: "teams")
}

model Athlete {
  id            String      @id @default(uuid())
  espnId        String      @map(name: "espn_id")
  uid           String      @unique
  guid          String      @unique
  firstName     String      @map(name: "first_name")
  lastName      String      @map(name: "last_name")
  fullName      String      @map(name: "full_name")
  displayName   String      @map(name: "display_name")
  shortName     String      @map(name: "short_name")
  weight        Int?        @map(name: "weight")
  height        Int?        @map(name: "height")
  displayHeight String?     @map(name: "display_height")
  age           Int?        @map(name: "age")
  dateOfBirth   DateTime?   @map(name: "date_of_birth")
  birthday      String?     @map(name: "birthday") // Month/Date/Year no extra 0
  slug          String
  espnUrl       String      @default("https://www.espn.com") @map(name: "espn_url")
  team          Team?       @relation(fields: [teamId], references: [id])
  teamId        String?     @map(name: "team_id")
  position      Position    @relation(fields: [positionId], references: [id])
  positionId    String
  league        League      @relation(fields: [leagueId], references: [id])
  leagueId      String      @map(name: "league_id")
  number        String?
  isInjured     Boolean     @map(name: "is_injured")
  injuryStatus  String?     @map(name: "injury_status")
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime?   @map(name: "updated_at")
  depths        Depth[]
  fpsAthlete    FpsAthlete? @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId  String?

  @@unique([espnId, leagueId])
  @@map(name: "athletes")
}

model Depth {
  id        String     @id @default(uuid())
  espnId    String     @map(name: "espn_id")
  name      String     @map(name: "name")
  league    League     @relation(fields: [leagueId], references: [id])
  leagueId  String     @map(name: "league_id")
  depth     Int
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime?  @map(name: "updated_at")
  athletes  Athlete[]
  positions Position[]

  @@unique([espnId, leagueId, depth])
  @@map(name: "depths")
}

model Position {
  id               String    @id @default(uuid())
  espnId           String    @map(name: "espn_id")
  name             String
  displayName      String    @map(name: "display_name")
  abbreviation     String
  parentPositionId String?   @map(name: "parent_position_id")
  createdAt        DateTime  @default(now()) @map(name: "created_at")
  updatedAt        DateTime? @map(name: "updated_at")
  league           League    @relation(fields: [leagueId], references: [id])
  leagueId         String    @map(name: "league_id")
  athletes         Athlete[]
  depths           Depth[]

  @@unique([espnId, leagueId])
  @@map(name: "positions")
}

model TeamGame {
  id       String  @id @default(uuid())
  game     Game?   @relation(fields: [gameId], references: [id])
  team     Team?   @relation(fields: [teamId], references: [id])
  teamId   String? @map(name: "team_id")
  gameId   String? @map(name: "game_id")
  isHome   Boolean @map(name: "is_home")
  leagueId String  @map(name: "league_id")

  @@unique([leagueId, teamId, gameId])
  @@map(name: "team_games")
}

model Game {
  id        String     @id @default(uuid())
  espnId    String     @map(name: "espn_id")
  date      DateTime
  name      String
  shortName String     @map(name: "short_name")
  week      Int?
  createdAt DateTime   @default(now()) @map(name: "created_at")
  updatedAt DateTime?  @map(name: "updated_at")
  leagueId  String     @map(name: "league_id")
  teamGames TeamGame[]

  @@unique([leagueId, espnId])
  @@map(name: "games")
}

model FpsAthlete {
  id       String @id @default(uuid())
  name     String @map("player_name")
  team     String
  position String
  byeWeek  Int?   @map("bye_week")

  FpsOverview    FpsOverview?
  Athlete        Athlete[]
  FpsAverageStat FpsAverageStat[]
  FpsTotalStat   FpsTotalStat[]
  FpsRank        FpsRank[]
  FpsNote        FpsNote[]

  @@unique([name, team])
  @@map("fps_athletes")
}

model FpsAverageStat {
  id             String     @id @default(uuid())
  tiers          Int
  fanPts         Float      @map("fan_pts")
  yardsPassing   Float      @map("yards_passing")
  tdsPassing     Float      @map("tds_passing")
  rec            Int
  yardsReceiving Float      @map("yards_receiving")
  tdsReceiving   Float      @map("tds_receiving")
  att            Int
  yardsRushing   Float      @map("yards_rushing")
  tdsRushing     Float      @map("tds_rushing")
  fpsAthlete     FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId   String     @unique @map("fps_athlete_id")

  @@map("fps_average_stats")
}

model FpsTotalStat {
  id             String     @id @default(uuid())
  tiers          Int
  fanPts         Float      @map("fan_pts")
  yardsPassing   Float      @map("yards_passing")
  tdsPassing     Float      @map("tds_passing")
  rec            Int
  yardsReceiving Float      @map("yards_receiving")
  tdsReceiving   Float      @map("tds_receiving")
  att            Int
  yardsRushing   Float      @map("yards_rushing")
  tdsRushing     Float      @map("tds_rushing")
  fpsAthlete     FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId   String     @unique @map("fps_athlete_id")

  @@map("fps_total_stats")
}

model FpsRank {
  id           String     @id @default(uuid())
  tiers        Int
  best         Int
  worst        Int
  avg          Float
  stdDev       Float      @map("std_dev")
  ecrVsAdp     Float      @map("ecr_vs_adp")
  fpsAthlete   FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId String     @unique @map("fps_athlete_id")

  @@map("fps_ranks")
}

model FpsNote {
  id           String     @id @default(uuid())
  content      String
  fpsAthlete   FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId String     @unique @map("fps_athlete_id")

  @@map("fps_notes")
}

model FpsOverview {
  id           String     @id @default(uuid())
  sos          Float      @map("strength_of_schedule")
  ecrVsAdp     Float      @map("ecr_vs_adp")
  avgPts       Float      @map("average_points")
  pctGames     String     @map("percentage_games")
  fpsAthlete   FpsAthlete @relation(fields: [fpsAthleteId], references: [id])
  fpsAthleteId String     @unique @map("fps_athlete_id")

  @@map("fps_overviews")
}

/////////////////////////////////////
model ScrapedLeague {
  id           String          @id @default(uuid())
  teamsListUrl String          @map(name: "teams_list_url")
  abr          String          @unique
  teams        ScrapedTeam[]
  createdAt    DateTime        @default(now()) @map(name: "created_at")
  updatedAt    DateTime?       @map(name: "updated_at")
  player       ScrapedPlayer[]

  @@map(name: "scraped_leagues")
}

model ScrapedTeam {
  id            String          @id @default(uuid())
  league        ScrapedLeague   @relation(fields: [leagueId], references: [id])
  leagueId      String          @map(name: "league_id")
  depthChartUrl String?         @map(name: "depth_chart_url")
  rosterUrl     String          @map(name: "roster_url")
  teamUrl       String          @map(name: "team_url")
  scheduleUrl   String          @map(name: "schedule_url")
  city          String?
  name          String?
  abr           String
  imgSrc        String          @map(name: "img_src")
  players       ScrapedPlayer[]
  createdAt     DateTime        @default(now()) @map(name: "created_at")
  updatedAt     DateTime?       @map(name: "updated_at")
  game          ScrapedGame[]

  @@map(name: "scraped_teams")
}

model ScrapedPlayer {
  id                  String           @id @default(uuid())
  team                ScrapedTeam      @relation(fields: [teamId], references: [id])
  teamId              String           @map(name: "team_id")
  name                String
  injuryStatus        String?          @map(name: "injury_status")
  pos                 String?
  depth               Int?
  positionGroup       String?          @map(name: "position_group")
  playerUrl           String           @map(name: "player_url")
  playerImageSrc      String           @map(name: "player_image_src")
  height              String?
  weight              String?
  experience          String?
  college             String?
  age                 String?
  number              String?
  playerDepthPosition String[]         @map(name: "player_depth_position")
  createdAt           DateTime         @default(now()) @map(name: "created_at")
  updatedAt           DateTime?        @map(name: "updated_at")
  League              ScrapedLeague?   @relation(fields: [leagueId], references: [id])
  leagueId            String?          @map(name: "league_id")
  fantasyProsData     FantasyProsData?
  batting             String?
  throwing            String?
  shot                String?
  birthPlace          String?          @map(name: "birth_place")
  birthDate           String?          @map(name: "birth_date")
  salary              String?
  espnPlayerId        String?          @map(name: "espn_player_id")

  @@unique([leagueId, espnPlayerId, name])
  @@map(name: "scraped_players")
}

model FantasyProsData {
  id                 String         @id @default(uuid())
  player             ScrapedPlayer? @relation(fields: [playerId], references: [id])
  playerId           String?        @unique @map(name: "player_id")
  rank               Int
  playerName         String         @map(name: "player_name")
  teamAbr            String         @map(name: "team_abr")
  pos                String
  byeWeek            Int?           @map(name: "bye_week")
  strengthOgSchedule String         @map(name: "strength_of_schedule")
  avgAdp             String         @map(name: "avg_adp")
  notes              String
  avgFanPoints       Float          @map(name: "avg_fan_points")
  avgPassingYds      Float          @map(name: "avg_passing_yards")
  avgPassingTds      Float          @map(name: "avg_passing_tds")
  avgReceivingRec    Float          @map(name: "avg_receiving_rec")
  avgReceivingYds    Float          @map(name: "avg_receiving_yds")
  avgReceivingTds    Float          @map(name: "avg_receiving_tds")
  avgRushingAtt      Float          @map(name: "avg_rushing_att")
  avgRushingYds      Float          @map(name: "avg_rushing_yds")
  avgRushingTds      Float          @map(name: "avg_rushing_tds")
  totalFanPoints     Float          @map(name: "total_fan_points")
  totalPassingYds    Float          @map(name: "total_passing_yds")
  totalPassingTds    Float          @map(name: "total_passing_tds")
  totalReceivingRec  Float          @map(name: "total_receiving_rec")
  totalReceivingYds  Float          @map(name: "total_receiving_yds")
  totalReceivingTds  Float          @map(name: "total_receiving_tds")
  totalRushingAtt    Float          @map(name: "total_rushing_att")
  totalRushingYds    Float          @map(name: "total_rushing_yds")
  totalRushingTds    Float          @map(name: "total_rushing_tds")
  createdAt          DateTime       @default(now()) @map(name: "created_at")
  updatedAt          DateTime?      @map(name: "updated_at")

  @@map(name: "fantasy_pros_data")
}

model ScrapedGame {
  id         String        @id @default(uuid())
  homeTeamId String        @map(name: "home_team_id")
  awayTeamId String        @map(name: "away_team_id")
  createdAt  DateTime      @default(now()) @map(name: "created_at")
  updatedAt  DateTime?     @map(name: "updated_at")
  date       DateTime
  team       ScrapedTeam[]

  @@map(name: "scraped_games")
}
